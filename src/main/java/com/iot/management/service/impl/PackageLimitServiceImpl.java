package com.iot.management.service.impl;

import com.iot.management.exception.PackageExpiredException;
import com.iot.management.exception.PackageLimitExceededException;
import com.iot.management.model.entity.DangKyGoi;
import com.iot.management.model.entity.DuAn;
import com.iot.management.model.entity.GoiCuoc;
import com.iot.management.service.PackageLimitService;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class PackageLimitServiceImpl implements PackageLimitService {

    @Override
    public void validateDeviceLimit(DuAn duAn) {
        DangKyGoi dangKyGoi = validatePackageStatus(duAn);
        GoiCuoc goiCuoc = dangKyGoi.getGoiCuoc();

        if (goiCuoc == null) {
            throw new PackageExpiredException("G√≥i c∆∞·ªõc kh√¥ng h·ª£p l·ªá");
        }

        // ƒê·∫øm s·ªë thi·∫øt b·ªã hi·ªán t·∫°i trong t·∫•t c·∫£ khu v·ª±c c·ªßa d·ª± √°n
        int currentDevices = duAn.getKhuVucs().stream()
                .mapToInt(khuVuc -> khuVuc.getThietBis() != null ? khuVuc.getThietBis().size() : 0)
                .sum();

        int maxDevices = goiCuoc.getSlThietBiToiDa();

        System.out.println("üîç Checking device limit for project: " + duAn.getMaDuAn());
        System.out.println("   Current devices: " + currentDevices + " / Max: " + maxDevices);
        System.out.println("   Package: " + goiCuoc.getTenGoi());

        if (currentDevices >= maxDevices) {
            throw new PackageLimitExceededException(
                    "S·ªë l∆∞·ª£ng thi·∫øt b·ªã ƒë√£ ƒë·∫°t gi·ªõi h·∫°n c·ªßa g√≥i c∆∞·ªõc (" +
                            maxDevices + " thi·∫øt b·ªã). Hi·ªán t·∫°i: " + currentDevices + " thi·∫øt b·ªã");
        }
    }

    @Override
    public void validateZoneLimit(DuAn duAn) {
        DangKyGoi dangKyGoi = getCurrentPackage(duAn);
        validatePackageStatus(duAn);

        GoiCuoc goiCuoc = dangKyGoi.getGoiCuoc();
        int currentZones = duAn.getKhuVucs().size();

        if (currentZones >= goiCuoc.getSlKhuVucToiDa()) {
            throw new PackageLimitExceededException(
                    "S·ªë l∆∞·ª£ng khu v·ª±c ƒë√£ ƒë·∫°t gi·ªõi h·∫°n c·ªßa g√≥i c∆∞·ªõc (" +
                            goiCuoc.getSlKhuVucToiDa() + " khu v·ª±c)");
        }
    }

    @Override
    public void validateRuleLimit(DuAn duAn) {
        DangKyGoi dangKyGoi = getCurrentPackage(duAn);
        validatePackageStatus(duAn);

        GoiCuoc goiCuoc = dangKyGoi.getGoiCuoc();
        int currentRules = 0; // This should be implemented based on your rule entity

        if (currentRules >= goiCuoc.getSlLuatToiDa()) {
            throw new PackageLimitExceededException(
                    "S·ªë l∆∞·ª£ng lu·∫≠t ƒë√£ ƒë·∫°t gi·ªõi h·∫°n c·ªßa g√≥i c∆∞·ªõc (" +
                            goiCuoc.getSlLuatToiDa() + " lu·∫≠t)");
        }
    }

    @Override
    public DangKyGoi getCurrentPackage(DuAn duAn) {
        if (duAn.getNguoiDung() == null) {
            throw new PackageExpiredException("D·ª± √°n ch∆∞a g√°n ng∆∞·ªùi d√πng h·ª£p l·ªá");
        }
        return duAn.getNguoiDung().getDangKyGois().stream()
                .filter(dkg -> "ACTIVE".equals(dkg.getTrangThai()))
                .findFirst()
                .orElseThrow(
                        () -> new PackageExpiredException("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng k√Ω g√≥i c∆∞·ªõc ho·∫∑c g√≥i c∆∞·ªõc ƒë√£ h·∫øt h·∫°n"));
    }

    @Override
    public boolean isPackageExpired(DangKyGoi dangKyGoi) {
        return dangKyGoi.getNgayKetThuc() != null &&
                dangKyGoi.getNgayKetThuc().isBefore(LocalDateTime.now());
    }

    @Override
    public DangKyGoi validatePackageStatus(DuAn duAn) {
        DangKyGoi dangKyGoi = getCurrentPackage(duAn);
        if (isPackageExpired(dangKyGoi)) {
            throw new PackageExpiredException(
                    "G√≥i c∆∞·ªõc ƒë√£ h·∫øt h·∫°n. Vui l√≤ng gia h·∫°n ho·∫∑c n√¢ng c·∫•p g√≥i c∆∞·ªõc ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng");
        }
        return dangKyGoi;
    }

}