package com.iot.management.service;

import com.iot.management.model.entity.DangKyGoi;
import com.iot.management.repository.DangKyGoiRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class SubscriptionExpiryChecker {

    private static final Logger logger = LoggerFactory.getLogger(SubscriptionExpiryChecker.class);

    private final DangKyGoiRepository dangKyGoiRepository;

    public SubscriptionExpiryChecker(DangKyGoiRepository dangKyGoiRepository) {
        this.dangKyGoiRepository = dangKyGoiRepository;
    }

    /**
     * Ch·∫°y m·ªói 30 ph√∫t ƒë·ªÉ ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c g√≥i ƒë√£ h·∫øt h·∫°n
     */
    @Scheduled(cron = "0 */30 * * * ?")
    @Transactional
    public void checkAndUpdateExpiredSubscriptions() {
        LocalDateTime now = LocalDateTime.now();

        logger.info("=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA G√ìI H·∫æT H·∫†N ===");
        logger.info("Th·ªùi gian hi·ªán t·∫°i: {}", now);

        // T√¨m c√°c g√≥i ƒë√£ h·∫øt h·∫°n nh∆∞ng v·∫´n c√≤n tr·∫°ng th√°i ACTIVE
        List<DangKyGoi> expiredPackages = dangKyGoiRepository
                .findByTrangThaiAndNgayKetThucBefore(DangKyGoi.TRANG_THAI_ACTIVE, now);

        logger.info("T√¨m th·∫•y {} g√≥i ƒë√£ h·∫øt h·∫°n", expiredPackages.size());

        int updatedCount = 0;
        for (DangKyGoi dk : expiredPackages) {
            try {
                String oldStatus = dk.getTrangThai();
                dk.setTrangThai("EXPIRED");
                dangKyGoiRepository.save(dk);

                logger.info("‚úì ƒê√£ c·∫≠p nh·∫≠t g√≥i ID={} t·ª´ {} -> EXPIRED (User ID={}, H·∫øt h·∫°n: {})",
                        dk.getMaDangKy(),
                        oldStatus,
                        dk.getNguoiDung().getMaNguoiDung(),
                        dk.getNgayKetThuc());

                updatedCount++;

                // notificationService.sendExpiryNotification(dk);

            } catch (Exception e) {
                logger.error("‚úó L·ªói khi c·∫≠p nh·∫≠t g√≥i ID={}: {}", dk.getMaDangKy(), e.getMessage());
            }
        }

        logger.info("=== K·∫æT TH√öC: ƒê√£ c·∫≠p nh·∫≠t {}/{} g√≥i ===\n", updatedCount, expiredPackages.size());
    }

    /**
     * Ch·∫°y m·ªói 30 ph√∫t ƒë·ªÉ c·∫£nh b√°o c√°c g√≥i s·∫Øp h·∫øt h·∫°n (c√≤n 7 ng√†y)
     */
    @Scheduled(cron = "0 */30 * * * ?")
    @Transactional
    public void checkExpiringSubscriptions() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime sevenDaysLater = now.plusDays(7);

        logger.info("=== KI·ªÇM TRA G√ìI S·∫ÆP H·∫æT H·∫†N ===");
        logger.info("T√¨m g√≥i h·∫øt h·∫°n t·ª´ {} ƒë·∫øn {}", now, sevenDaysLater);

        // T√¨m c√°c g√≥i s·∫Øp h·∫øt h·∫°n trong 7 ng√†y t·ªõi
        List<DangKyGoi> expiringPackages = dangKyGoiRepository
                .findByTrangThaiAndNgayKetThucBetween(
                        DangKyGoi.TRANG_THAI_ACTIVE,
                        now,
                        sevenDaysLater);

        logger.info("T√¨m th·∫•y {} g√≥i s·∫Øp h·∫øt h·∫°n trong 7 ng√†y t·ªõi", expiringPackages.size());

        for (DangKyGoi dk : expiringPackages) {
            long daysRemaining = java.time.temporal.ChronoUnit.DAYS.between(now, dk.getNgayKetThuc());

            logger.info("‚ö† G√≥i ID={} (User ID={}) s·∫Ω h·∫øt h·∫°n sau {} ng√†y ({})",
                    dk.getMaDangKy(),
                    dk.getNguoiDung().getMaNguoiDung(),
                    daysRemaining,
                    dk.getNgayKetThuc());

            // notificationService.sendExpiryWarning(dk, daysRemaining);
        }

        logger.info("=== K·∫æT TH√öC KI·ªÇM TRA S·∫ÆP H·∫æT H·∫†N ===\n");
    }

    /**
     * Ch·∫°y m·ªói gi·ªù ƒë·ªÉ log th·ªëng k√™ (optional - c√≥ th·ªÉ t·∫Øt n·∫øu kh√¥ng c·∫ßn)
     */
    @Scheduled(cron = "0 0 * * * ?")
    @Transactional(readOnly = true)
    public void logSubscriptionStats() {
        LocalDateTime now = LocalDateTime.now();

        long activeCount = dangKyGoiRepository.findByTrangThai(DangKyGoi.TRANG_THAI_ACTIVE).size();
        long expiredCount = dangKyGoiRepository.countByTrangThaiAndExpired(DangKyGoi.TRANG_THAI_ACTIVE, now);

        if (expiredCount > 0) {
            logger.warn("üìä Th·ªëng k√™: {} g√≥i ACTIVE | {} g√≥i c·∫ßn c·∫≠p nh·∫≠t EXPIRED", activeCount, expiredCount);
        }
    }
}
